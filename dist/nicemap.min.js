"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var MapLoader=/*#__PURE__*/function(){function a(){_classCallCheck(this,a),this.dic={}}return _createClass(a,[{key:"fetch",value:function(a){function b(){return a.apply(this,arguments)}return b.toString=function(){return a.toString()},b}(function(a){var b=this.dic;return void 0===b[a]?(console.log("fetching "+a),fetch(a).then(function(a){if(console.log("response:",a),!a.ok)throw Error(a.statusText);return a.json()}).then(function(c){return b[a]=c})):Promise.resolve(b[a])})}]),a}(),mapLoader=new MapLoader,Nicemap=/*#__PURE__*/function(){function a(b){if(_classCallCheck(this,a),b=b||{},!b.containerId)throw"Missing parameter 'containerId'";var c=this.containerId=b.containerId,d=this.container=d3.select("#"+c).node();if(null==d)throw c+": container not found";this.svg=d3.select(d).append("svg").attr("class","nicemap");var e=this.mapG=this.svg.append("g");this.rect=e.append("rect").attr("x",0).attr("y",0).style("stroke","green").style("fill","none"),this.projection=d3.geoMercator(),this.boundaryColor="#bbb",this.line=this.svg.append("line").style("stroke","green"),this.colorScale=b.colorScale||d3.scaleLinear().range(["#eee","#2e4"]),this.processData(b.data);/*
        const width = container.node().clientWidth;
        const height = container.node().clientHeight;
        
        

        // we use Mercator projection
        const projection = this.projection = d3.geoMercator()
            .scale(width / 2 / Math.PI)
            .translate([width / 2, height *0.7]);

        
        const zoom = this.zoom = d3.zoom()
            .scaleExtent([1, 40])
            .translateExtent([[0,0], [width, height]])
            .extent([[0, 0], [width, height]])
            .on("zoom", zoomed);


        // create the SVG element
        this.svg = container.append("svg")
            .attr("width", width)
            .attr("height", height)
            .attr("class", "map")
            .call(zoom)
            .on("dblclick.zoom", null)
    
        // geopath transforms GeoJson feature into SVG path 
        this.geopath = d3.geoPath().projection(projection);

        // create the tooltip
        this.createTooltip();

        
        
        let mapG = this.mapG = this.svg.append("g");

        function zoomed() {
            mapG.attr("transform", d3.event.transform);
        }

        this.createLegend();

        this.createZoomButtons();

        // fetch the map
        const worldMapUrl = "geo_un_simple_boundaries.geojson";
        const me = this;
        console.log("fetch:"+containerId);
        fetch(worldMapUrl)
            .then(d=>d.json())
            .then(d=>me.worldMap = d)
            .then(d=>me.buildMap(d))
            .then(d=>console.log("fetched:"+containerId))
        */var f=this;mapLoader.fetch("geo_un_simple_boundaries.geojson").then(function(a){return f.worldMap=a}).then(function(){return f.redraw()}),window.addEventListener("resize",function(){return f.redraw()})}return _createClass(a,[{key:"redraw",value:function redraw(){var a=Math.PI,b=this.container,c=b.clientWidth,d=b.clientHeight;console.log("redraw. ",c,d);var e=this.projection;this.line.attr("x1",0).attr("x2",c).attr("y1",d/2).attr("y2",d/2);e.scale(c/(2*a)).translate([.5*c,.5*d+.25*(.5*c)]),this.svg.attr("width",c).attr("height",d);var f=d3.geoPath().projection(e),h=this.mapG;this.rect.attr("width",c).attr("height",d);// add countries
var g=this.worldMap.features.filter(function(a){return"ATA"!=a.properties.ISO3CD}),i=this,j=h.selectAll("path").data(g);j.exit().remove(),j.enter().append("path").style("stroke",i.boundaryColor).style("vector-effect","non-scaling-stroke").merge(j).attr("d",f).style("fill",function(a){return i.getValueColor(a.properties.ISO3CD)})}},{key:"processData",value:function processData(a){var b=this.valueTable={};a?(a.forEach(function(a){return b[a[0]]=a[1]}),this.valueRange=d3.extent(a.map(function(a){return a[1]}))):this.valueRange=[0,1],this.colorScale.domain(this.valueRange)}// return a color for a given country code
},{key:"getValueColor",value:function getValueColor(a){var b=this.valueTable[a];return void 0===b?"#eee":this.colorScale(b)}},{key:"buildMap",value:function buildMap(){var a=this.mapG,b=this,c=a.selectAll("path").data(this.worldMap.features.filter(function(a){return"ATA"!=a.properties.ISO3CD})).enter().append("path").attr("d",b.geopath).style("fill",function(a){return b.getValueColor(a.properties.ISO3CD)}).style("stroke",b.boundaryColor).style("vector-effect","non-scaling-stroke");// add countries
c.on("mouseover",function(a){this.parentNode.appendChild(this),d3.select(this).style("stroke","black"),b.showTooltip(a.properties.ISO3CD,a.properties.MAPLAB)}).on("mousemove",function(a){b.showTooltip(a.properties.ISO3CD,a.properties.ROMNAM)}).on("mouseout",function(){d3.select(this).style("stroke",b.boundaryColor),b.hideToolTip()})}// create a tooltip (see .css file for look&feel)
},{key:"createTooltip",value:function createTooltip(){this.tooltip=d3.select("body").append("div").attr("class","nicemap-tooltip").style("position","absolute").style("z-index","10").style("visibility","hidden"),this.tooltip.append("div").attr("class","tooltip-text")}// visualize & hide the tooltip
},{key:"showTooltip",value:function showTooltip(a,b){var c=this.valueTable[a];void 0===c&&(c="no value");var d="<strong>"+b+"</strong><br>Value = "+c;this.tooltip.style("visibility","visible").style("top",d3.event.pageY+10+"px").style("left",d3.event.pageX+10+"px"),this.tooltip.select(".tooltip-text").html(d)}},{key:"hideToolTip",value:function hideToolTip(){this.tooltip.style("visibility","hidden")}},{key:"createLegend",value:function createLegend(){var a=this.svg.append("g").attr("transform","translate(10, 0)"),b=120,c=this.containerId+"-gradient",d=a.append("defs").append("svg:linearGradient").attr("id",c).attr("x1","0%").attr("y1","100%").attr("x2","100%").attr("y2","100%").attr("spreadMethod","pad");// this.container.node().clientHeight - 40;
d.append("stop").attr("offset","0%").attr("stop-color",this.colorScale(this.valueRange[0])).attr("stop-opacity",1),d.append("stop").attr("offset","100%").attr("stop-color",this.colorScale(this.valueRange[1])).attr("stop-opacity",1),a.append("rect").attr("width",b).attr("height",10).style("fill","url(#"+c+")").attr("transform","translate(0,10)");var e=d3.scaleLinear().range([0,b]).domain(this.valueRange),f=d3.axisBottom().scale(e).ticks(5);a.append("g").attr("class","y axis").attr("transform","translate(0,20)").call(f)}},{key:"createZoomButtons",value:function createZoomButtons(){var a=this.container.node().clientHeight-30,b=this,c=this.svg.selectAll("g.buttons").data(["-","+"]).enter().append("g").attr("class","nicemap-buttons").attr("transform",function(b,c){return"translate(20,"+(a-17*c)+")"});c.append("circle").attr("r",8).on("click",function(a){d3.event.stopPropagation(),console.log(a),b.svg.transition().call(b.zoom.scaleBy,"+"==a?2:.5)}),c.append("text").text(function(a){return a}).style("font-size","10px").style("text-anchor","middle").style("alignment-baseline","central")}}]),a}();

