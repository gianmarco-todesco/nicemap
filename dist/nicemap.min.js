"use strict";let dd;class NicemapGeoJson{constructor(a){if(a=a||{},!a.url)throw"Missing parameter 'url'";this.url=a.url,this.countryName=a.countryName||"MAPLAB",this.countryCode=a.countryCode||"ISO3CD",this.scaleFactor=a.scaleFactor||1,this.offset=a.offset||[0,-.25]}fetch(){if(this.result===void 0){console.log("fetching "+this.url);const a=this;this.result=fetch(this.url).then(a=>a.json()).then(b=>a._processResult(b)).catch(b=>(console.error(b),a.result=Promise.resolve(null)))}return this.result}_processResult(a){if(dd=a,"object"!=typeof a||"FeatureCollection"!=a.type)throw"Invalid map data : "+this.url;const b=this;return a.features=a.features.filter(a=>"ATA"!=a.properties.ISO3CD),a.features.forEach(a=>{a._nicemapCountryName=a.properties[b.countryName],a._nicemapCountryCode=a.properties[b.countryCode]}),a.features.forEach(a=>{a.centroidLatLng=d3.geoCentroid(a)}),this.result=Promise.resolve(a),this.result}}class Nicemap{constructor(a){function b(){let a=d3.event.transform.k;a!=j&&(console.log("scale = ",a),j=a,d3.selectAll(".bubble").attr("r",b=>b.bubbleRadius/a)),g.attr("transform",d3.event.transform)}const c=this;if(a=a||{},!a.containerId)throw"Missing parameter 'containerId'";const d=this.containerId=a.containerId,e=this.container=d3.select("#"+d).node();if(null==e)throw d+": container not found";if(this.colorScaleArg=a.colorScale||["white","black"],Array.isArray(this.colorScaleArg)&&2==this.colorScaleArg.length);else if("function"==typeof this.colorScaleArg);else throw"color scale must be an array of two colors or a function that return a d3 color scale";if(!(a.mapData instanceof NicemapGeoJson))throw"mapData must be an instance of NicemapGeoJson";this.dataName=a.dataName||"value",this.bubbleName=a.bubbleName||"bubble",this.bubbleStroke=a.bubbleStroke||"red",this.bubbleFill=a.bubbleFill||"none",this.bubbleUnit=a.bubbleUnit||.01;const f=this.zoom=d3.zoom().scaleExtent([1,30]).on("zoom",b);this.svg=d3.select(e).append("svg").attr("class","nicemap-svg").call(f).on("dblclick.zoom",null);let g=this.mainLayer=this.svg.append("g"),h=this.mapG=g.append("g"),i=this.bubbles=g.append("g"),j=1;this.projection=d3.geoMercator(),this.boundaryColor="#bbb",this.processData(a),this.createLegend(),this.createTooltip(),this.createZoomButtons(),this.mapScaleFactor=a.mapData.scaleFactor,this.mapOffset=a.mapData.offset,a.mapData.fetch().then(a=>c.worldMap=a).then(()=>c.redraw()),window.addEventListener("resize",()=>c.redraw())}redraw(){const a=this.container,b=a.clientWidth,c=a.clientHeight,e=this.projection,f=.5*b;e.scale(this.mapScaleFactor*b/(2*Math.PI)).translate([.5*b+f*this.mapOffset[0],.5*c-f*this.mapOffset[1]]),this.svg.attr("width",b).attr("height",c);const h=d3.geoPath().projection(e);let i=this.mapG;const d=this.worldMap.features,g=this;let j=i.selectAll("path").data(d);j.exit().remove(),j.enter().append("path").style("stroke",g.boundaryColor).style("vector-effect","non-scaling-stroke").merge(j).attr("d",h).style("fill",a=>g.getValueColor(a._nicemapCountryCode)).on("mouseover",function(a){this.parentNode.appendChild(this),d3.select(this).style("stroke","#FFF"),g.showTooltip(a)}).on("mousemove",function(a){g.showTooltip(a)}).on("mouseout",function(){d3.select(this).style("stroke",g.boundaryColor),g.hideToolTip()});const k=this.bubbleDataTable,l=d.filter(a=>k[a._nicemapCountryCode]);l.forEach(a=>{a.centroid=e(a.centroidLatLng),a.bubbleRadius=c*this.bubbleUnit*Math.log(k[a._nicemapCountryCode])});let m=this.bubbles.selectAll("circle").data(l);m.exit().remove(),m.enter().append("circle").attr("class","bubble").attr("id",a=>"bubble-"+a._nicemapCountryCode).style("stroke",this.bubbleStroke).style("vector-effect","non-scaling-stroke").merge(m).attr("cx",a=>a.centroid[0]).attr("cy",a=>a.centroid[1]).attr("r",a=>a.bubbleRadius).style("fill",this.bubbleFill);this.legend.attr("visibility","visible").attr("transform","translate(10, "+(c-40)+")"),this.zoom.translateExtent([[0,0],[b,c]]).extent([[0,0],[b,c]])}processData(a){let b=a.data;const c=this.valueTable={};b?(b.forEach(a=>c[a[0]]=a[1]),this.valueRange=d3.extent(b.map(a=>a[1]))):this.valueRange=[0,1],Array.isArray(this.colorScaleArg)?this.colorScale=d3.scaleLinear().range(this.colorScaleArg).domain(this.valueRange):"function"==typeof this.colorScaleArg&&(this.colorScale=this.colorScaleArg(this.valueRange));const d=this.bubbleDataTable={};a.bubbleData&&a.bubbleData.forEach(a=>{d[a[0]]=a[1]})}getValueColor(a){let b=this.valueTable[a];return void 0===b?"#eee":this.colorScale(b)}createTooltip(){this.tooltip=d3.select("body").append("div").attr("class","nicemap-tooltip").style("position","absolute").style("z-index","10").style("visibility","hidden"),this.tooltip.append("div").attr("class","tooltip-text")}showTooltip(a){this.tooltip.style("visibility","visible").style("top",d3.event.pageY+10+"px").style("left",d3.event.pageX+10+"px"),this.tooltip.select(".tooltip-text").html(this.getTooltipText(a))}hideToolTip(){this.tooltip.style("visibility","hidden")}getTooltipText(a){const b=a._nicemapCountryCode,c=a._nicemapCountryName;let d=this.valueTable[b];void 0===d&&(d="no value");let e="<strong>"+c+"</strong><br>"+this.dataName+" = "+d;return 0<this.bubbleDataTable[b]&&(e+="<br>"+this.bubbleName+" = "+this.bubbleDataTable[b]),e}createLegend(){let a=this.legend=this.svg.append("g");a.attr("visibility","hidden");const b=this.containerId+"-gradient";let c=a.append("defs").append("svg:linearGradient").attr("id",b).attr("x1","0%").attr("y1","100%").attr("x2","100%").attr("y2","100%").attr("spreadMethod","pad");[0,10,20,30,40,50,60,70,80,90,100].forEach(a=>{const b=this.valueRange[0]+.01*((this.valueRange[1]-this.valueRange[0])*a);c.append("stop").attr("offset",a+"%").attr("stop-color",this.colorScale(b)).attr("stop-opacity",1)}),a.append("rect").attr("width",120).attr("height",10).style("fill","url(#"+b+")").attr("transform","translate(0,10)");var d=d3.scaleLinear().range([0,120]).domain(this.valueRange),e=d3.axisBottom().scale(d).ticks(5);a.append("g").attr("class","y axis").attr("transform","translate(0,20)").call(e)}createZoomButtons(){const a=this;let b=this.svg.selectAll("g.buttons").data(["+","-"]).enter().append("g").attr("class","nicemap-buttons").attr("transform",(a,b)=>"translate(20,"+(10+17*b)+")");b.append("circle").attr("r",8).on("click",b=>{d3.event.stopPropagation(),a.svg.transition().call(a.zoom.scaleBy,"+"==b?2:.5)}),b.append("text").text(a=>a).style("font-size","10px").style("text-anchor","middle").style("alignment-baseline","central")}}